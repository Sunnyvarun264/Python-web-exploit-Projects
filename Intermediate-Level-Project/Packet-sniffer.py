import scapy.all as scapy
import argparse

# Set up command-line argument parsing
parser = argparse.ArgumentParser(description="Network Packet Analyzer")
parser.add_argument("-i", "--interface", required=True, help="Network interface to sniff (e.g., eth0, wlan0)")
parser.add_argument("-c", "--count", type=int, default=100, help="Number of packets to capture")
args = parser.parse_args()

# Create a dictionary to store packet statistics
packet_stats = {}

def analyze_packet(packet):
    try:
        # Get the packet protocol (e.g., TCP, UDP, ICMP, etc.)
        protocol = packet.getlayer(scapy.IP).proto

        # Get the source and destination IP addresses
        src_ip = packet[scapy.IP].src
        dst_ip = packet[scapy.IP].dst

        # Get the source and destination port numbers (if applicable)
        src_port = packet[scapy.TCP].sport if protocol == 6 else (packet[scapy.UDP].sport if protocol == 17 else None)
        dst_port = packet[scapy.TCP].dport if protocol == 6 else (packet[scapy.UDP].dport if protocol == 17 else None)

        # Update the packet statistics
        if protocol not in packet_stats:
            packet_stats[protocol] = {"count": 1, "src_ips": {src_ip: 1}, "dst_ips": {dst_ip: 1}}
        else:
            packet_stats[protocol]["count"] += 1
            packet_stats[protocol]["src_ips"][src_ip] = packet_stats[protocol]["src_ips"].get(src_ip, 0) + 1
            packet_stats[protocol]["dst_ips"][dst_ip] = packet_stats[protocol]["dst_ips"].get(dst_ip, 0) + 1

        # Print the packet details
        print(f"Protocol: {protocol}, Src IP: {src_ip}, Dst IP: {dst_ip}, Src Port: {src_port}, Dst Port: {dst_port}")
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    # Start sniffing packets
    try:
        scapy.sniff(iface=args.interface, count=args.count, prn=analyze_packet)
    except Exception as e:
        print(f"An error occurred during packet sniffing: {e}")

    # Print the packet statistics
    print("\nPacket Statistics:")
    for protocol, stats in packet_stats.items():
        print(f"Protocol: {protocol}, Count: {stats['count']}, Src IPs: {stats['src_ips']}, Dst IPs: {stats['dst_ips']}")

if __name__ == "__main__":
    main()