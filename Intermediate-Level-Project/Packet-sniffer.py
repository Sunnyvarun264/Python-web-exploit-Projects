import scapy.all as scapy

# Set the network interface to sniff (e.g., eth0, wlan0, etc.)
INTERFACE = "eth0"

# Set the number of packets to capture
PACKET_COUNT = 100

# Create a dictionary to store packet statistics
packet_stats = {}

def analyze_packet(packet):
    # Get the packet protocol (e.g., TCP, UDP, ICMP, etc.)
    protocol = packet.getlayer(scapy.IP).proto

    # Get the source and destination IP addresses
    src_ip = packet.getlayer(scapy.IP).src
    dst_ip = packet.getlayer(scapy.IP).dst

    # Get the source and destination port numbers (if applicable)
    src_port = packet.getlayer(scapy.TCP).sport if protocol == 6 else None
    dst_port = packet.getlayer(scapy.TCP).dport if protocol == 6 else None

    # Update the packet statistics
    if protocol not in packet_stats:
        packet_stats[protocol] = {"count": 1, "src_ips": {src_ip: 1}, "dst_ips": {dst_ip: 1}}
    else:
        packet_stats[protocol]["count"] += 1
        packet_stats[protocol]["src_ips"][src_ip] = packet_stats[protocol]["src_ips"].get(src_ip, 0) + 1
        packet_stats[protocol]["dst_ips"][dst_ip] = packet_stats[protocol]["dst_ips"].get(dst_ip, 0) + 1

    # Print the packet details
    print(f"Protocol: {protocol}, Src IP: {src_ip}, Dst IP: {dst_ip}, Src Port: {src_port}, Dst Port: {dst_port}")

def main():
    # Start sniffing packets
    scapy.sniff(iface=INTERFACE, count=PACKET_COUNT, prn=analyze_packet)

    # Print the packet statistics
    print("\nPacket Statistics:")
    for protocol, stats in packet_stats.items():
        print(f"Protocol: {protocol}, Count: {stats['count']}, Src IPs: {stats['src_ips']}, Dst IPs: {stats['dst_ips']}")

if __name__ == "__main__":
    main()
